@page "{handler?}"
@model ProjectPRN221.Pages.Admin.CoursesModel
@using ProjectPRN221.Models
@{
    Layout = "Layout.cshtml";
}
@{
    int getMaximumPagination = (int)ViewData["MaxPage"];
    int recordPerPage = (int)ViewData["recordPerPage"];
    List<String> categories = ViewData["categories"] as List<String>;
}
<style>
    .table-container {
        overflow-y: auto;
        margin-top: 20px;
    }

    .styled-table thead th {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
        background-color: #fff;
        z-index: 2;
    }

    .styled-table {
        text-align: left;
        border-collapse: collapse;
        margin: 0 auto;
        margin-top: 30px;
        font-size: 0.9em;
        font-family: sans-serif;
        min-width: 650px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
        background: white;
    }

        .styled-table thead tr {
            text-align: left;
        }

        .styled-table th,
        .styled-table td {
            padding: 12px 15px;
        }

        .styled-table tbody tr {
            border-bottom: 1px solid #dddddd;
        }

            .styled-table tbody tr:nth-of-type(even) {
                background-color: #f3f3f3;
            }

            .styled-table tbody tr:last-of-type {
                border-bottom: 2px solid #009879;
            }

            .styled-table tbody tr.active-row {
                font-weight: bold;
                color: #009879;
            }

    .header h2 {
        text-align: center;
    }

    .content #pagination {
        margin-top: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
    }


    #pageNumber, svg {
        margin: 0 10px;
    }

    img {
        -webkit-user-drag: none;
        -moz-user-drag: none;
        -ms-user-drag: none;
        user-drag: none;
    }


    .content {
        width: 900px;
        background: white;
        padding: 20px 20px;
        margin: 0 auto;
        transition: margin-left 0.5s ease-out;
    }

        .content.active {
            margin-left: 450px;
        }

    .action {
        text-align: center;
    }

        .action img {
            margin: 0 10px;
        }

    .sidebar {
        position: fixed;
    }

    .menuToggle {
        position: fixed;
    }

    .CourseIcon {
        max-width: 256px !important;
    }

    .IsDeleted {
        background-color: gray !important;
        text-align: center;
    }

    #searchingBox {
        margin-top: 5px;
    }

        #searchingBox input,
        #searchingBox select,
        #searchingBox label {
            margin: 0 5px;
        }
</style>

<div class="content">
    @Html.AntiForgeryToken()
    <div class="header">
        <h2>Courses table</h2>
    </div>
    <div style="display:flex; flex-direction: row-reverse;">
        <div class="icon">
            <img src="https://www.svgrepo.com/show/522232/plus-square.svg" witdh="64" height="64" onclick="Create()" />
        </div>
    </div>
    <div id="searchingBox" style="display:flex; flex-direction: row-reverse; margin-right:5px;">
        <select name="sortBy" id="sortBy" onchange="updateSortBy()">
            <option value="IDASC">Sắp xếp theo id ( Tăng )</option>
            <option value="IDDESC">Sắp xếp theo id ( Giảm )</option>
            <option value="CreatedDateASC">Sắp xếp theo ngày tạo ( Tăng )</option>
            <option value="CreatedDateDESC">Sắp xếp theo ngày tạo ( Giảm )</option>
            <option value="UpdatedDateASC">Sắp xếp theo ngày cập nhập ( Tăng )</option>
            <option value="UpdatedDateDESC">Sắp xếp theo ngày cập nhập ( Giảm )</option>
        </select>
        <select name="category" id="category" onchange="updateCategory()">
            <option value="ALL">Tất cả</option>
            @foreach (String s in categories)
            {
                <option value="@s">@s</option>
            }
        </select>
        <label for="category">Loại</label>
        <input type="text" name="search" id="search" onkeyup="updateTitleSearching()" />
    </div>
    <div class="table-container">
        <table class="styled-table">
            <thead>
                <tr style="text-align:center;">
                    <th>
                        ID
                    </th>
                    <th>
                        Creator
                    </th>
                    <th>
                        Title
                    </th>
                    <th>
                        Thumbnail
                    </th>
                    <th>
                        Created Date
                    </th>

                    <th>
                        Updated Date
                    </th>


                    <th class="action">Action</th>

                </tr>
            </thead>
            <tbody id="tableBody">
            </tbody>
        </table>

    </div>

    <div id="pagination">
        <svg onclick="move('first')" fill="#000000" height="21.6px" width="30px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
             viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">
<path d="M472.8,90.1L298.6,192.5v-73.9c0-28.4-17.6-41.2-39.2-28.5l-152.8,89.8v-52c0-23.6-19.1-42.7-42.7-42.7H42.7
	C19.1,85.3,0,104.4,0,128V384c0,23.5,19.1,42.7,42.7,42.7H64c23.5,0,42.7-19.1,42.7-42.7v-51.9l152.8,89.8
	c21.5,12.7,39.2-0.2,39.2-28.5v-74l174.2,102.5c21.5,12.7,39.2-0.2,39.2-28.5V118.6C512,90.2,494.4,77.4,472.8,90.1z" />
</svg>
        <svg onclick="move('previous')" width="30px" height="21.6px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M2.75 20C2.75 20.5523 3.19772 21 3.75 21C4.30228 21 4.75 20.5523 4.75 20L4.75 4C4.75 3.44772 4.30229 3 3.75 3C3.19772 3 2.75 3.44772 2.75 4V20Z" fill="#212121" />
            <path d="M20.75 19.0526C20.75 20.4774 19.1383 21.305 17.9803 20.4748L7.51062 12.9682C6.50574 12.2477 6.54467 10.7407 7.5854 10.073L18.0551 3.35665C19.2198 2.60946 20.75 3.44583 20.75 4.82961L20.75 19.0526Z" fill="#212121" />
        </svg>
        <select id="pageSelect" onchange="selectPage()">
            @for (int index = 1; index <= getMaximumPagination; index++)
            {
                <option value="@index">Page @index</option>
            }
        </select>
        <svg onclick="move('next')" width="30px" height="21.6px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M3.76172 7.21957V16.7896C3.76172 18.7496 5.89172 19.9796 7.59172 18.9996L11.7417 16.6096L15.8917 14.2096C17.5917 13.2296 17.5917 10.7796 15.8917 9.79957L11.7417 7.39957L7.59172 5.00957C5.89172 4.02957 3.76172 5.24957 3.76172 7.21957Z" fill="#292D32" />
            <path d="M20.2383 18.9303C19.8283 18.9303 19.4883 18.5903 19.4883 18.1803V5.82031C19.4883 5.41031 19.8283 5.07031 20.2383 5.07031C20.6483 5.07031 20.9883 5.41031 20.9883 5.82031V18.1803C20.9883 18.5903 20.6583 18.9303 20.2383 18.9303Z" fill="#292D32" />
        </svg>
        <svg onclick="move('last')" fill="#000000" height="21.6px" width="30px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
             viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">
<path d="M469.3,95.3H448c-23.5,0-42.7,19.1-42.7,42.7v52l-152.7-89.8c-21.6-12.7-39.2,0.1-39.2,28.5v73.9L39.2,100.1
	C17.6,87.4,0,100.2,0,128.6v274.8c0,28.3,17.6,41.2,39.2,28.5l174.2-102.5v74c0,28.3,17.6,41.2,39.2,28.5l152.7-89.8V394
	c0,23.5,19.1,42.7,42.7,42.7h21.3c23.5,0,42.7-19.1,42.7-42.7V138C512,114.4,492.9,95.3,469.3,95.3z" />
</svg>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="courseModal" tabindex="-1" aria-labelledby="courseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="courseModalLabel">Course Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="courseId">Id</label>
                        <input type="text" class="form-control" id="courseId" readonly>
                    </div>
                    <div class="form-group">
                        <label for="courseUserId">Creator</label>
                        <input type="text" class="form-control" id="courseUserId" readonly>
                    </div>
                    <div class="form-group">
                        <label for="courseEnrolNums">Total learner</label>
                        <input type="text" class="form-control" id="courseEnrolNums" readonly>
                    </div>
                    <div class="form-group">
                        <label for="courseTitle">Title</label>
                        <input type="text" class="form-control" id="courseTitle">
                    </div>
                    <div class="form-group">
                        <label for="courseThumbnail">Thumbnail</label>
                        <input type="text" class="form-control" id="courseThumbnail">
                    </div>
                    <div class="form-group">
                        <label for="courseCategories">Categories</label>
                        <input type="text" class="form-control" id="courseCategories">
                    </div>
                    <div class="form-group">
                        <label for="courseDescription">Description</label>
                        <textarea class="form-control" id="courseDescription" rows="3"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="coursePrice">Price</label>
                        <input type="number" class="form-control" id="coursePrice" step="0.01">
                    </div>
                    <div id="CreatedDateDiv" class="form-group">
                        <label for="courseCreatedAt">Created date</label>
                        <input type="date" class="form-control" id="courseCreatedAt">
                    </div>
                    <div id="UpdatedDateDiv" class="form-group">
                        <label for="courseUpdatedAt">Updated date</label>
                        <input type="date" class="form-control" id="courseUpdatedAt">
                    </div>
                    <div class="form-group d-flex align-items-center" style="justify-content: space-evenly;">
                        <div class="form-group">
                            <label for="courseIsActived">Is actived</label>
                            <input type="checkbox" class="form-check-input" id="courseIsActived">
                        </div>
                        <div class="form-group">
                            <label for="courseIsDeleted">Is deleted</label>
                            <input type="checkbox" class="form-check-input" id="courseIsDeleted">
                        </div>
                    </div>
                </form>
                <div class="form-group d-flex align-items-center" style="justify-content: space-evenly;">
                    <img id="editQuizzIcon" title="Edit Quizz" alt="Edit Quizz" width="64" height="64" src="https://www.svgrepo.com/show/155531/test.svg" />
                    <img id="editExplodeIcon" title="Edit Explode" alt="Edit Explode" width="64" height="64" src="https://www.svgrepo.com/show/324454/copybook-lesson-task-homework.svg" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="SaveButton">Save changes</button>
            </div>
        </div>
    </div>
</div>

<script>
    let pageNumber = 1;
    let maximumPaginationPage = @getMaximumPagination;
    let listOfCourse;

    // This is part of searching
    let categorySearch = "";
    let titleSearch = "";
    let orderBy = "";
    // =========================

    document.addEventListener("DOMContentLoaded", function () {

        let Menulist = document.querySelectorAll(".Menulist li");
        Menulist.forEach((item) => item.classList.remove("active"));
        const liElement = document.querySelector(".Courses");
        liElement.classList.toggle("active");
    });

    function selectPage() {
        const selectedOption = document.getElementById("pageSelect").selectedIndex;
        const selectedValue = document.getElementById("pageSelect").options[selectedOption].value;
        pageNumber = selectedValue;
        loadPage();
    }

    function updateMaxpage(msg) {
        $.ajax({
            url: 'Courses/MaxPage',
            type: 'GET',
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            success: function (response) {
                maximumPaginationPage = parseInt(response);

                if (maximumPaginationPage > $("#pageSelect option").length) {
                    $("#pageSelect").empty();
                    for (let i = 1; i <= maximumPaginationPage; i++) {

                        var option = $('<option></option>')
                            .val(i)
                            .text('Page ' + i);
                        $("#pageSelect").append(option);
                    }
                }

                if (msg != "lastPage") {
                    $("#pageSelect").prop('selectedIndex', pageNumber - 1);
                } else {
                    pageNumber = maximumPaginationPage;
                    $("#pageSelect").prop('selectedIndex', pageNumber - 1);
                    loadPage();
                }

            }, error: function (error) {
                showToast("Lấy số lượng page tối đa thất bại", error, "bi bi-exclamation-triangle", "danger");
            }
        });
    }

    function updateCategory() {

        categorySearch = $("#category").val();
        if (categorySearch == "ALL") categorySearch = "";
        move("first");
    }

    function updateTitleSearching() {
        categorySearch = $.trim($("#search").val());
        move("first");
    }

    function updateSortBy() {
        orderBy = $("#sortBy").val();
        pageNumber = 1;
        loadPage();
    }

    function validateData() {
        if ($.trim($("#courseTitle").val()) == "") {
            showToast("Thông báo", "Thiếu tiêu đề của khóa học", "bi bi-exclamation-triangle", "danger");
            return false;
        } else if ($.trim($("#courseUserId").val()) == "") {
            showToast("Thông báo", "Thiếu người tạo ", "bi bi-exclamation-triangle", "danger");
            return false;
        } else if ($.trim($("#courseThumbnail").val()) == "") {
            showToast("Thông báo", "Thiếu ảnh của khóa học", "bi bi-exclamation-triangle", "danger");
            return false;
        } else if ($.trim($("#courseCategories").val()) == "") {
            showToast("Thông báo", "Thiếu loại của khóa học", "bi bi-exclamation-triangle", "danger");
            return false;
        } else if ($.trim($("#coursePrice").val()) == "") {
            showToast("Thông báo", "Thiếu giá của khóa học", "bi bi-exclamation-triangle", "danger");
            return false;
        }
        return true;
    }

    function move(page) {
        if (pageNumber == page) return;
        switch (page) {
            case 'first': {
                document.getElementById("pageSelect").selectedIndex = 0;
                pageNumber = 1;
                loadPage();
                break;
            }
            case 'previous': {
                if (parseInt(pageNumber) > 1) {
                    document.getElementById("pageSelect").selectedIndex--;
                    pageNumber--;
                    loadPage();
                }
                break;
            }
            case 'next': {
                if (parseInt(pageNumber) < parseInt(maximumPaginationPage)) {
                    document.getElementById("pageSelect").selectedIndex++;
                    pageNumber++;
                    loadPage();
                }
                break;
            }
            case 'last': {
                updateMaxpage("lastPage");
             
                break;
            }
        }
    }


    function escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    
    function loadPage() {
        $.ajax({
            url: `Courses/Page?index=${pageNumber}&category=${categorySearch}&sortBy=${orderBy}&title=${titleSearch}`,
            type: 'GET',
            success: function (data) {

                updateMaxpage();

                const tableBody = $('#tableBody');
                tableBody.empty();
                let count = 0;

                listOfCourse = data;

                for (const course of data) {
                    count++;

                    let row = $('<tr style="text-align:center;">');

                    if (course.isDeleted) {
                        row = $('<tr class="IsDeleted">');
                    }
                    row.append('<td>' + course["id"] + '</td>');
                    row.append('<td>' + escapeHtml(String(course["creator"])) + '</td>');
                    row.append('<td>' + escapeHtml(String(course["title"])) + '</td>');
                    row.append('<img class="CourseIcon" src="' + escapeHtml(String(course["thumbnail"])) + '"></img>');
                    row.append('<td>' + course["createdDate"] + '</td>');
                    row.append('<td>' + course["updateDate"] + '</td>');

                    const actionCell = $('<td>');
                    actionCell.addClass('action');
                    actionCell.append('<img src="https://www.svgrepo.com/show/522527/edit-3.svg" title="Edit this course" width=30 height=30 alt="Edit this course" onclick=Edit("' + course["id"] + '")></img>')

                    row.append(actionCell);
                    tableBody.append(row);
                }
                for (let i = 1; i <= (@recordPerPage - count); i++) {

                    const newRow = $('<tr>');
                    newRow.append('<td>\u00A0</td>');
                    newRow.append('<td>\u00A0</td>');
                    newRow.append('<td>\u00A0</td>');
                    newRow.append('<td>\u00A0</td>');
                    newRow.append('<td>\u00A0</td>');
                    newRow.append('<td>\u00A0</td>');
                    newRow.append('<td>\u00A0</td>');
                    tableBody.append(newRow);
                }
            },
            error: function (error) {
                console.error(error);
                showToast("Lấy dữ liệu thất bại", error, "bi bi-exclamation-triangle", "danger");
            }
        });
    }

    function TryEdit() {
        if (!validateData()) {
            return;
        }
        const khoaHoc = {
            id: document.getElementById('courseId').value,
            title: document.getElementById('courseTitle').value,
            thumbnail: document.getElementById('courseThumbnail').value,
            categories: document.getElementById('courseCategories').value,
            description: document.getElementById('courseDescription').value,
            price: parseFloat(document.getElementById('coursePrice').value),
            createdAt: document.getElementById('courseCreatedAt').value,
            updatedAt: document.getElementById('courseUpdatedAt').value,
            isActived: document.getElementById('courseIsActived').checked,
            isDeleted: document.getElementById('courseIsDeleted').checked
        };

        $.ajax({
            url: 'Courses/Edit',
            type: 'POST',
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data: {
                course: khoaHoc
            },
            success: function (response) {
                showToast("Thông báo", "Cập nhật khóa học thành công", "bi bi-check-square", "success");
                loadPage();
            }, error: function (error) {
                showToast("Cập nhập không thành công", error, "bi bi-exclamation-triangle", "danger");
            }
        });

        $('#courseModal').modal('hide');
    }

    function formatDateForInput(dateStr) {

        let parts = dateStr.split('/');

        let day = parseInt(parts[0]);
        let month = parseInt(parts[1]);
        let year = parseInt(parts[2]);

        let sDay = (day < 10 ? "0" + day : day);
        let sMonth = (month < 10 ? "0" + month : month);

        return `${year}-${sMonth}-${sDay}`;
    }

    function Edit(courseId) {
        const course = listOfCourse.find(c => c.id == courseId);

        if (course) {
            $('#courseId').val(course.id).prop("readonly", true);
            var text = $('<input>', {
                class: 'form-control',
                id: 'courseUserId',
                readonly: true,
                value: course.creator
            });
            $('#courseUserId').replaceWith(text);

            $('#courseTitle').val(course.title);
            $('#courseThumbnail').val(course.thumbnail);
            $('#courseCategories').val(course.category);
            $('#courseDescription').val(course.description);
            $('#coursePrice').val(course.price);
            $('#UpdatedDateDiv').show();
            $('#CreatedDateDiv').show();
            $('#courseCreatedAt').val(formatDateForInput(course.createdDate)).prop("readonly", true);
            $('#courseUpdatedAt').val(formatDateForInput(course.updateDate)).prop("readonly", true);
            $('#courseIsActived').prop('checked', course.isActive);
            $('#courseEnrolNums').val(course.totalLearner);
            $('#courseIsDeleted').prop('checked', course.isDeleted);

            $('#editQuizzIcon').off('click').on('click', function () {
                Quizz(course.id);
            }).show();

            $('#editExplodeIcon').off('click').on('click', function () {
                Explode(course.id);
            }).show();

            $('#SaveButton').off('click').on('click', function () {
                TryEdit();
            }).text("Save change");

            $('#courseModal').modal('show');
        }
    }

    function Create() {

        $.ajax({
            url: `Courses/Author`,
            type: 'GET',
            success: function (data) {

                $('#courseId').val("").prop("readonly", true);
                var select = $('<select>', {
                    class: 'form-control',
                    id: 'courseUserId'
                });
                $.each(data, function (index, item) {
                    var option = $('<option>', {
                        value: item.id,
                        text: item.username
                    });
                    select.append(option);
                });
                $('#courseUserId').replaceWith(select);

                $('#courseTitle').val("");
                $('#courseThumbnail').val("");
                $('#courseCategories').val("");
                $('#courseDescription').val("");
                $('#coursePrice').val("");
                $('#courseIsActived').prop('checked', true);
                $('#courseEnrolNums').val("");
                $('#courseIsDeleted').prop('checked', false);


                $('#UpdatedDateDiv').hide();
                $('#CreatedDateDiv').hide();

                $('#editQuizzIcon').off('click').hide();
                $('#editExplodeIcon').off('click').hide();
                $('#SaveButton').off('click').on('click', function () {
                    TryCreate();
                }).text("Create");
                $('#courseModal').modal('show');
            },
            error: function (error) {
                console.error(error);
                showToast("Lấy dữ liệu thất bại", error, "bi bi-exclamation-triangle", "danger");
            }
        });
    }

    function TryCreate() {
        if (!validateData()) {
            return;
        }
        const khoaHoc = {
            id: document.getElementById('courseId').value,
            userId: document.getElementById('courseUserId').value,
            title: document.getElementById('courseTitle').value,
            thumbnail: document.getElementById('courseThumbnail').value,
            categories: document.getElementById('courseCategories').value,
            description: document.getElementById('courseDescription').value,
            price: parseFloat(document.getElementById('coursePrice').value),
            isActived: document.getElementById('courseIsActived').checked,
            isDeleted: document.getElementById('courseIsDeleted').checked
        };

        $.ajax({
            url: 'Courses/Create',
            type: 'POST',
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data: {
                course: khoaHoc
            },
            success: function (response) {
                showToast("Thông báo", "Tạo khóa học thành công", "bi bi-check-square", "success");
                move("last");
            }, error: function (error) {
                showToast("Tạo không thành công", error, "bi bi-exclamation-triangle", "danger");
            }
        });

        $('#courseModal').modal('hide');
    }

    function Quizz(courseId) {
        window.location.href = 'EditQuizz?CourseId=' + courseId;
    }

    function Explode(courseId) {
        window.location.href = 'EditExplode?CourseId=' + courseId;
    }

    $(document).ready(function () {
        loadPage();
    });
</script>
